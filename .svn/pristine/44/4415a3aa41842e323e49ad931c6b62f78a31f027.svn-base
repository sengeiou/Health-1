//
//  SettingViewController.swift
//  Health
//
//  Created by Yalin on 15/8/20.
//  Copyright (c) 2015年 Yalin. All rights reserved.
//

import UIKit

class SettingViewController: UIViewController {
    
    var isOpenVersion : String = "0"
    
    
    @IBOutlet weak var tableView: UITableView!
    
    //    var list : [(String, String, UIViewController)] = []
    
    
    // 数据格式为  (ImageName, Title, 进入的Controller)
    var list: [(String, String, UIViewController)] = [
        //        ("membersManager", "成员资料修改管理", UIViewController()),
        ("membersManager", "成员资料修改管理", FamilyMembersViewController()),
        ("socialBind", "社交账号绑定管理", ThirdPlatformBindController()),
        ("deviceManager", "健康设备管理", DeviceBindViewController()),
        ("feedback", "用户建议反馈", FeedBackViewController()),
        //        ("HealthCenterBind", "健康中心绑定", UIViewController()),
        //        ("checkUpdate", "检查软件更新", UIViewController()),
    ]
    //    var list: [(String, String, UIViewController)] = [
    //        ("membersManager", "成员资料修改管理", UIViewController()),
    //        ("socialBind", "社交账号绑定管理", UIViewController()),
    //        ("deviceManager", "健康设备管理", UIViewController()),
    //        ("HealthCenterBind", "健康中心绑定", UIViewController()),
    //        ("checkUpdate", "检查软件更新", UIViewController()),
    //        ("feedback", "用户建议反馈", UIViewController()),
    //    ]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //请求0-1接口，返回值为0则数组中没有检查软件更新一项，返回值为1则有
        RequestType.isOpenVersion.startRequest(["typeid":2 as AnyObject], completionHandler: { (data, response, error) -> Void in
            let result = Request.dealResponseData(data, response: response, error: error)
            
            if let err = result.error {
                UIAlertView(title: "检测失败", message: err.localizedDescription, delegate: nil, cancelButtonTitle: "确定").show()
                #if DEBUG
                    println("\n----------\n\(#function) \nerror:\(err.localizedDescription)\n==========")
                #endif
            }else {
                
                let jsonObj: NSDictionary? = result.jsonObj as? NSDictionary
                print("jsonObj:\(jsonObj)")
                self.isOpenVersion = jsonObj?["isopenversion"] as! String
                if self.isOpenVersion.UInt8Value == 1{
                    self.list = [
                        ("membersManager", "成员资料修改管理", FamilyMembersViewController()),
                        ("socialBind", "社交账号绑定管理", ThirdPlatformBindController()),
                        ("deviceManager", "健康设备管理", DeviceBindViewController()),
                        ("feedback", "用户建议反馈", FeedBackViewController()),
                        ("checkUpdate", "检查软件更新", UIViewController()),
                    ]
                }else{
                    self.list = [
                        ("membersManager", "成员资料修改管理", FamilyMembersViewController()),
                        ("socialBind", "社交账号绑定管理", ThirdPlatformBindController()),
                        ("deviceManager", "健康设备管理", DeviceBindViewController()),
                        ("feedback", "用户建议反馈", FeedBackViewController()),
                    ]
                }
                self.tableView.reloadData()
            }
        })
        
        // Do any additional setup after loading the view.
        self.navigationController?.isNavigationBarHidden = true
    }
    
    override func viewWillAppear(_ animated: Bool) {
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
    
}

extension SettingViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // +1 最后一项是退出登录
        return list.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellId = "SettingTableViewCellId"
        var cell = tableView.dequeueReusableCell(withIdentifier: cellId)
        
        if cell == nil {
            cell = UITableViewCell(style: UITableViewCellStyle.default, reuseIdentifier: cellId)
        }
        
        if (indexPath as NSIndexPath).row == list.count {
            cell?.imageView?.image = UIImage()
            cell?.textLabel?.text = "退出登录"
        } else {
            let (imageName, title, _) = list[(indexPath as NSIndexPath).row]
            cell?.imageView?.image = UIImage(named: imageName)
            cell?.textLabel?.text = title
            cell?.accessoryType = UITableViewCellAccessoryType.disclosureIndicator
        }
        
        return cell!
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        if (indexPath as NSIndexPath).row == list.count {
            SettingManager.removeLocalNotification()
            LoginManager.logout()
            AppDelegate.applicationDelegate().changeToLoginController()
        }
        else if (indexPath as NSIndexPath).row == -1 {
            // 成员资料修改管理
            let controller = CompleteInfoViewController()
            controller.userModel = UserManager.mainUser
            controller.canBack = true
            controller.delegate = self
            AppDelegate.rootNavgationViewController().pushViewController(controller, animated: true)
        }
            //        else if indexPath.row == 1 {
            //            // 社交账号绑定管理
            //        }
            //        else if indexPath.row == 2 {
            //            // 健康设备绑定管理
            //        }
            //        else if indexPath.row == 3 {
            //            // 健康中心绑定管理管理
            //        }
            //        else if indexPath.row == 4 {
            //            // 检查软件更新
            //        }
            //        else if indexPath.row == 5 {
            //            // 用户反馈管理
            //        }
        else {
            
            if list.count == 5 {
                if (indexPath as NSIndexPath).row == list.count - 1
                {
                    AppDelegate.applicationDelegate().updateHUD(HUDType.hotwheels, message: "检查中", detailMsg: nil, progress: nil)
                    RequestType.CheckOutVersion.startRequest(["typeid":2 as AnyObject], completionHandler: { (data, response, error) -> Void in
                        AppDelegate.applicationDelegate().hiddenHUD()
                        let result = Request.dealResponseData(data, response: response, error: error)
                        if let err = result.error {
                            UIAlertView(title: "检测失败", message: err.localizedDescription, delegate: nil, cancelButtonTitle: "确定").show()
                            #if DEBUG
                                println("\n----------\n\(#function) \nerror:\(err.localizedDescription)\n==========")
                            #endif
                        }
                        else {
                            
                            let jsonObj: NSDictionary? = result.jsonObj as? NSDictionary
                            let appStoreVersion = jsonObj?["version"] as! String//服务器版本
                            
                            let currentVersion = Bundle.main.infoDictionary!["CFBundleShortVersionString"] as! String//当前版本号
                            if appStoreVersion == currentVersion
                            {
                                let alertController = UIAlertController(title: "提示", message: "您当前为最新版本", preferredStyle: UIAlertControllerStyle.alert) // 这里因为控件都不存在改变的可能，所以一律使用let类型
                                
                                let alertView1 = UIAlertAction(title: "好的", style: UIAlertActionStyle.cancel) { (UIAlertAction) -> Void in
                                    
                                    print("取消按钮点击事件")
                                    
                                }
                                
                                alertController.addAction(alertView1)// 当添加的UIAlertAction超过两个的时候，会自动变成纵向分布
                                self.present(alertController, animated: true, completion: nil)
                            }else{
                                let alertController = UIAlertController(title: "新版本来啦", message: jsonObj?["introduce"] as! String, preferredStyle: UIAlertControllerStyle.alert) // 这里因为控件都不存在改变的可能，所以一律使用let类型
                                
                                let alertView1 = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel) { (UIAlertAction) -> Void in
                                    
                                    print("取消按钮点击事件")
                                    
                                }
                                
                                let alertView2 = UIAlertAction(title: "更新", style: UIAlertActionStyle.default) { (UIAlertAction) -> Void in
                                    
                                    print("确定按钮点击事件")
                                    
                                }
                                
                                alertController.addAction(alertView2)
                                
                                alertController.addAction(alertView1)// 当添加的UIAlertAction超过两个的时候，会自动变成纵向分布
                                self.present(alertController, animated: true, completion: nil)
                            }
                            
                            #if DEBUG
                                println("\n----------\n\(#function) \nresult \(jsonObj)\n==========")
                            #endif
                        }
                    })
                }
                else
                {
                    let (_, _, controller) = list[(indexPath as NSIndexPath).row]
                    AppDelegate.rootNavgationViewController().pushViewController(controller, animated: true)
                }
            }else if list.count == 4{
                let (_, _, controller) = list[(indexPath as NSIndexPath).row]
                AppDelegate.rootNavgationViewController().pushViewController(controller, animated: true)
            }
            
        }
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70
    }
}

extension SettingViewController: CompleteInfoDelegate {
    
    func completeInfo(_ controller: CompleteInfoViewController, user: UserModel, phone: String?, organizationCode: String?) {
        
        LoginManager.completeInfomation(user.name, gender: user.gender, age: user.age, height: UInt8(user.height), phone: phone, organizationCode: organizationCode, headURL:user.headURL, complete: { (error) -> Void in
            
            if error == nil {
                // 跳转到主页
                controller.navigationController?.popViewController(animated: true)
            }
            else {
                UIAlertView(title: "完善信息失败", message: error?.localizedDescription, delegate: nil, cancelButtonTitle: "确定").show()
            }
        })
    }
}
